{"meta":{"title":"子非鱼","subtitle":null,"description":"彼岸在何方","author":"梦田","url":"http://yoursite.com"},"pages":[{"title":"","date":"2017-09-28T10:33:20.479Z","updated":"2017-09-28T10:33:20.479Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""}],"posts":[{"title":"基于 Docker 部署 Hexo 并推送至 GitHub Pages","slug":"基于 Docker 部署 Hexo 并推送至 GitHub Pages","date":"2017-09-28T12:52:36.000Z","updated":"2017-09-28T13:06:17.838Z","comments":true,"path":"2017/09/28/基于 Docker 部署 Hexo 并推送至 GitHub Pages/","link":"","permalink":"http://yoursite.com/2017/09/28/基于 Docker 部署 Hexo 并推送至 GitHub Pages/","excerpt":"","text":"之前在 Virtualbox 内部署 Hexo 并推送至 GitHub Pages，但动辄占用十几G硬盘空间与过多内存资源让人难以接受，所以改用 Docker，硬盘占用由 14G 缩减至 158M，内存占用也未见增加多少，怕忘却故记录之。 1.安装 Docker基于脚本自动安装自是便捷，同时因网络环境特殊故而采用国内镜像。因为自己所用系统版本所以用 systemctl 启动服务。 $ curl -fsSL get.docker.com -o get-docker.sh$ sudo sh get-docker.sh --mirror Aliyun$ sudo systemctl enable docker$ sudo systemctl start docker$ sudo usermod -aG docker $USER 2.Docker 下安装 Hexo 并进入该容器 容器名由 --name 选项定义，--env 选项为定义环境变量，其中 GIT_USER 与 GIT_EMAIL 来自 zuolan/hexo 镜像初始化脚本， --restart 选项确定容器始终开启，-v 选项为设置共享数据卷，将本地 ssh key 目录与原博客源码目录挂载至容器内对应目录， -p 选项则设置对外端口， -it 选项则确定交互式终端， zuolan/hexo 明确基本镜像，最后通过 /bin/sh 进入容器。 $ sudo docker run --name yourcontainername \\ --env GIT_USER=yourgituser \\ --env GIT_EMAIL=yourgitgmail \\ --restart=always \\ -v $HOME/yourhosthexo:/mnt \\ -v $HOME/.ssh:/root/.ssh \\ -p 127.0.0.1:80:80 \\ -p 127.0.0.1:443:443 \\ -it zuolan/hexo /bin/sh 3.部署至 GitHub Pages在容器内升级 hexo 与主题并重新部署至 GitHub Pages。 # npm update# cd themes/next# git pull# hexo d -g","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"http://yoursite.com/tags/GitHub-Pages/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}]},{"title":"Chromium OS源码编译、烧录与使用笔记","slug":"Chromium-OS源码编译、烧录与使用笔记","date":"2017-03-28T07:52:59.000Z","updated":"2017-09-28T10:33:20.479Z","comments":true,"path":"2017/03/28/Chromium-OS源码编译、烧录与使用笔记/","link":"","permalink":"http://yoursite.com/2017/03/28/Chromium-OS源码编译、烧录与使用笔记/","excerpt":"","text":"以下记录Chromium OS 源码同步、编译、烧至U盘并使用的过程。 基础知识Chromium OS相关知识，看这里。 准备阶段最低配置 类型 参数 CPU 双核 2.0GHz 内存 8G 宽带 5Mbps 空白硬盘分区 50G 测试机型 双系统Win7下硬盘安装Ubuntu-16.04 LTS Q: 如何查看分区信息以确定(hdx,x)内参数？ A: 简单可选下载DiskGenius查看分区信息；极客可选DOS下查看分区。 Q: 安装Ubuntu提示无法卸载/isolinux之类信息？ A: 排错。 科学上网服务端服务器选择Ubuntu 16.04，源码编译shadowsocks-libev，官方教程看这里，中文看这里。 客户端全局代理设置看这里。 Q: Shadowsocks-Qt5开机自启如何设置？ A: 看这里。 创建Google API官方教程 Q: 无权限修改 /etc/chrome_dev.conf ? A: root # mount -o remount,rw / ，此方法同样适用登录激活时替换hosts。 源码编译Chromium OS获取Chromium OS源码安装依赖，之后配置git sudo apt-get install git-core gitk git-gui curl 配置如下： git config --global user.email &quot;you@example.com&quot; git config --global user.name &quot;Your Name&quot; 接着，下载并配置depot_tools proxychain4 git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git echo &quot;export PATH=`pwd`/depot_tools:&quot;$PATH&quot;&quot; &gt;&gt; ~/.bashrc echo &quot;umask 022&quot; &gt;&gt; ~/.bashrc echo &quot;export BOARD=x86-generic&quot; &gt;&gt; ~/.bashrc source ~/.bashrc 可通过执行cros、repo命令验证。 proxychain4 repo init -u https://chromium.googlesource.com/chromiumos/manifest.git --repo-url https://chromium.googlesource.com/external/repo.git proxychain4 repo sync 记得在需要使用代理时在命令前proxychain4。关于Git与Repo的基础知识可以看这里。 创建配置sudo如果不想每次启动新终端都重新输入密码，在配置文件中禁止tty_tickets即可，但此举使得所有进程都使用同一个sudo任务，具体参看跨终端sudo。 使用cros_sdk创建chrootQ: ImportError: No module named pkg_resources A: sudo apt install python-pip Q: Failure: Server presented certificate that does not match host www.googleapis.com / ERROR:(Note bash sometimes misreports &quot;command not found&quot; as exit code 1 instead of 127) A: hosts文件的问题，恢复原有hosts内容即可，具体参看这里。 Note: 如需删除Chroot，请使用cros_sdk --delete正确删除它。 构建所有包首先，在Chroot内键入export BOARD=x86-generic，使用./build_packages --board=${BOARD}构建软件包，请耐心等待。 构建测试镜像若上述操作成功，使用以下命令构建测试类型镜像并关闭开机验证，这样即可自由修改root文件系统内容。如果构建的是test这种类型的镜像，当使用SSH登陆装载此镜像的虚拟机时，密码统一为test0000。 ./build_image --board=${BOARD} --noenable_rootfs_verification test 将镜像转换为虚拟机镜像并运行在Ubuntu上安装虚拟机。 sudo apt-get install qemu-kvm 然后在BIOS中启用本地虚拟化 sudo kvm-ok 出现下面信息表示本地虚拟机已开启。 INFO: /dev/kvm exists KVM acceleration can be used 虚拟机基础操作命名示例： 1.启动虚拟机（带图形界面） $ ./bin/cros_start_vm --image_path=../build/images/${BOARD}/latest/chromiumos_qemu_image.bin 2.启动虚拟机（不带图形界面） $ ./bin/cros_start_vm --no_graphics --image_path=../build/images/${BOARD}/latest/chromiumos_qemu_image.bin 3.关闭虚拟机 $ ./bin/cros_stop_vm --kvm_pid /tmp/kvm.1234.pid 设置SSH访问测试镜像从宿主机到虚拟机，SSH默认情况如下，密码为test0000，但可以自定义设置访问端口，test类型镜像下虚拟机密码貌似不能改。 ssh root@localhost -p 9222 -o StrictHostKeyChecking=no VNC登陆信息为127.0.0.1:5900 自定义开机动画Chromium OS 开机动画实际上是由18张png图构成，只需替换即可，我们在Chroot下创建一个分支并在此分支下创建更改。 创建更改的新本地分支repo start change-assets . (cr) (change-assets) demo ~/trunk/src/scripts $ 其中，repo start 参数如下： repo start &lt;BRANCH_NAME&gt; [&lt;PROJECT_LIST&gt;] &lt;BRANCH_NAME&gt; 参数应该提供一个更改的简短说明给你正在尝试建立的项目。如果你不知道，那就考虑使用默认名称。 &lt;PROJECT_LIST&gt; 指定将要参与这个主题分支的项目。 注意：&quot;.&quot; 是指当前工作目录下的项目的简写。 使用cros_workon修改包并替换图像找出ebuild映射目录cros_workon 工具可以帮助我们了解ebuild映射关系。可使用以下命令查看ebuild和目录的完整列表，确定之前已在Chroot里设置 BOARD： cros_workon info --board=${BOARD} --all 如果想了解哪些ebuild使用特定目录中的源代码，可以使用grep查找它们。例如： cros_workon info --board = $ {BOARD} --all | grep chromeos-base/chromiumos-assets 返回以下输出： chromeos-base/chromiumos-assets chromiumos/platform/chromiumos-assets src/platform/chromiumos-assets 这将告诉您以下信息： ebuild的名称是： chromeos-base/chromiumos-assets 服务器上git仓库的路径为： chromiumos/platform/chromiumos-assets 您系统上源代码的路径是： src/platform/chromiumos-assets 注： 关于 ebuild 的知识看这里 关于 Gentoo 的知识看这里 替换 ${PACKAGE_NAME} 下图片在Chroot下键入 cros_workon --board=${BOARD} start ${PACKAGE_NAME} ，将 ${PACKAGE_NAME} 替换成需要变更的软件包名称，我们这里改为 chromeos-base/chromiumos-assets 从chroot外部运行以下命令 proxychain4 repo sync 同步源码（这一步表示还不是很懂），之后在Chroot内下载引导动画图片并批量替换（名字、尺寸须一致）。 利用 cros deploy 将修改的包部署到运行的虚拟机cros deploy 127.0.0.1:9222 chromeos-base/chromiumos-assets 注： cros deploy 设置要生效首先虚拟机得开启 cros deploy 后需要重启虚拟机才能生效 烧录将.bin烧至U盘键入 sudo fdisk -l 查看插入U盘所在区域，然后使用 cros flash usb:///dev/sdd ~/chromiumos/src/build/images/x86-generic/latest/chromiumos_test_image.bin 烧录编译的系统到U盘 修改分区如果要使用自定义大小容量的分区构建镜像，请考虑在 build_library/legacy_disk_layout.json 中添加新的磁盘布局或使用 adjust_part。请参阅下面的帮助， adjust_part =&apos;STATE：1G&apos; ---- 将1GB添加到状态分区 adjust_part =&apos;ROOT-A：-1G&apos; ---- 从主rootfs分区中删除1GB adjust_part =&apos;STATE：= 1G&apos; --- 设置状态分区为1GB 这里键入 ./build_image --board=${BOARD} --noenable_rootfs_verification test --adjust_part=&#39;STATE:+10G&#39;，这样我们的Chromium OS用户空间便增加10G，如果使用默认设置你会发现用户空间容量不足（约140MB）。 后记 通过U盘引导进入系统后在Chromebook上使用时，触摸板不能用，但在其他测试机上无问题;如果换机引导运行系统需要重新输入帐号、密码激活，但里面原有的个人文件不会丢失;编译前将可以联网激活的hosts文件放进去可以比较方便的实现激活；如果出现不能联无线网可用手机连接笔记本共享上网，不久后便能设置无线网连接。如果烧录test类型镜像Crosh下root密码为test0000，其它默认为chronos或编译时自己设置的密码，设置方法见这里；以上内容已同步至Wiki。 Linux系统安装——Ubuntu16.04+Windows7双系统 shadowsocks-libev官方教程 Ubuntu下实现全局翻墙的配置过程 Chroumium OS developer guide How to create Google API 跨终端sudo How to use cros deploy Build Chromium for Chromium OS and Deploy to realdevice","categories":[],"tags":[{"name":"Chromium OS","slug":"Chromium-OS","permalink":"http://yoursite.com/tags/Chromium-OS/"},{"name":"ebuild","slug":"ebuild","permalink":"http://yoursite.com/tags/ebuild/"},{"name":"Gentoo","slug":"Gentoo","permalink":"http://yoursite.com/tags/Gentoo/"},{"name":"cros","slug":"cros","permalink":"http://yoursite.com/tags/cros/"},{"name":"repo","slug":"repo","permalink":"http://yoursite.com/tags/repo/"}]},{"title":"通过Chrx在Chromebook上安装双“系统”（译）","slug":"通过Chrx在Chromebook上安装双“系统”（译）","date":"2016-10-24T14:51:32.000Z","updated":"2017-09-28T10:33:20.479Z","comments":true,"path":"2016/10/24/通过Chrx在Chromebook上安装双“系统”（译）/","link":"","permalink":"http://yoursite.com/2016/10/24/通过Chrx在Chromebook上安装双“系统”（译）/","excerpt":"","text":"本方法通过Linux的Chroot机制实现在Chromebook中建立双系统目标。以下内容翻译自这里，中间若有错误先行致歉并请指正，万分感谢。 平台 支持多数Chromebook型号，具体见chromebooks 安装 Linux发行版本系列，具体见操作系统与建议 chrx官网源码在此 进度 2.4版本增加对Fedora的支持，系统升级至Ubuntu 16.10；默认安装GalliumOS。更多见更新日志。 用法 通过chrx在一台全新的（或刚恢复出厂设置）的Chromebook上安装系统可分以下两个步骤： 首先，在您的固态硬盘上设置新系统的使用空间并重启； 接着，选择您需要安装的发型版本及相关用户选项设置。 具体步骤 1.开启开发者模式（例如Acer C720，键入 ESC+F3（刷新键）+电源键 ），然后重启；2.加载ChromeOS时出现白色背景写有“OS verifaication is OFF（操作系统验证是关闭的）”字样时按下CTRL+D；3.如允许，请配置您的无线网络；4.键入 CTRL+ALT+F2（按键上标有向右箭头的图案） 键入虚拟终端（VT）；5.键入 chronos（默认无密码）并回车进入 chronos@localhost shell；6.如需要，升级固件（对于Bay Trail模型要求，推荐Broadwell模式，可选的Haswell模型—更多见Chromebooks）；7.运行chrx：键入 curl –Os https://chrx.org/go &amp;&amp; sh go （更多见选项）；8.按照屏幕上的指示安装Chromebook；9.重启，然后重复执行第2至第5步、第7步安装并配置完成您的新系统。 注意： 1.登录新系统时用户名与密码一致。2.若安装ubuntu请选择LTS长期支持版。（不建议每半年更新一次linux系统） 选项 chrx可接受如下选项：格式：chrx [选项…] 选项 全称 详解 -d DISTRIBUTION-发行版本 安装系统发型版本[默认galliumos]（galliumos, ubuntu, lubuntu, xubuntu, kubuntu, edubuntu, fedora） -e ENVIRONMEN-环境 安装的环境[默认为desktop（桌面）]（desktop-桌面, minimal-极简, standard-标准, server-服务器）galliumos: desktop; ubuntu etc: desktop, minimal, standard, server, fedora: desktop, workstation, kde, xfce, lxde, mate,cinnamon, sugar -r RELEAS-版本号 系统版本号或版本名[]（lts-长期支持版, latest-最新版, dev-开发版, 15.10, 16.04, wily, xenial, etc）galliumos: latest-最新版, 2.0, xenon, nightly; 类ubuntu : latest-最新版, lts-长期支持版, dev-开发版, 16.04.1, xenial, etc; fedora: latest-最新版, 23, 24, 25 -a ARCH-结构 处理器结构（i386,amd64）[默认amd64] -m MIRROR-镜像 版本下载镜像选择 [${CHRX_OS_MIRROR}]; galliumos: ny1.us, va1.us, ca1.us, rb1.fr -t TARGETDISK-目标盘符 目标盘符（/dev/mmcblk1，/dev/sdb，等）[] -p PACKAGE-软件包 额外的软件包，一个或多个[]（chrome,kodi,minecraft,steam等）更多到 chrx.org (暂不支持fedora) -H HOSTNAME-主机名 新系统主机名[chrx] -U USERNAME-用户名 创建第一个用户名[chrx] -L LOCALE-区域设置 新系统区域设置[en US.UTF-8] -Z TIMEZONE-时区设置 新系统时区，[America/New_York]（America/San_Francisco, Europe/Amsterdam, Etc/UTC, 等） -n 禁用成功/失败通知 -s 跳过所有定制，只安装普通的操作系统 -y 非交互方式运行，采取默认值和不确定 -v 增加详细输出 -h 显示帮助信息 默认值在中括号内显示，例如：[默认值]。如果TARGETDISK没有键入，chrx将默认选择在内部固态硬盘安装系统。 软件包 使用 chrx -p 软件包名 ，chrx将在系统安装完毕后自动安装您所选的应用软件。chrx通过以下别名安装Ubuntu软件仓库内软件： 选项 详解 minecraft 安装 minecraft steam 安装 steam kodi 安装 Kodi Media Center chrome 安装 Google Chrome admin-misc 是 ”ssh tmux rsync vim” 的别名 dev-misc 是 “arduino geany geany-plugins ruby” 的别名 通过chrx命令可安装多个软件，您可根据需要引用 -p 软件名 参数订制。例如：-p &quot;gimp blender inkscape&quot; 。 示例GalliumOS Desktop (最新版)： curl -Os https://chrx.org/go &amp;&amp; sh go -v GalliumOS Desktop (最新版)，安装额外软件包： curl -Os https://chrx.org/go &amp;&amp; sh go -p &quot;minecraft steam kodi&quot; Lubuntu Desktop (最新版)： curl -Os https://chrx.org/go &amp;&amp; sh go -d lubuntu Ubuntu 标准版，系统版本16.04，主机名hal，首个用户名dave，包括其它一些管理工具： curl -Os https://chrx.org/go &amp;&amp; sh go -d ubuntu -e standard -r 16.04 -H hal -U dave -p admin-misc 高级玩法 您可以选择托管或自己缓存这些安装文件。有很多很好的理由这样做，特别是如果你会做大量安装的。然而，设置可能较为复杂，说明此README的范围之内。指向chrx在缓存，只需设置CHRX_WEB_ROOT 环境变量在运行前 go 脚本，就像这样： export CHRX_WEB_ROOT=&quot;http://myserver/chrx&quot; curl -O $CHRX_WEB_ROOT/go &amp;&amp; sh go 兼容性chromebooks 是否支持 CPU 系列 备注 ✅ Intel Haswell 固件升级 推荐 ✅ Intel Broadwell 固件升级 推荐 ✅ Intel Skylake 固件升级 推荐 ✅ Intel Bay Trail 固件升级 需要 ✅ Intel Braswell 固件升级 需要 ❓ Intel Sandy/Ivy Bridge 需要 SeaBIOS with Legacy Boot 兼容性 ❓ Intel Pineview 需要 SeaBIOS with Legacy Boot 兼容性 ❌ ARM 不支持ARM 如果您不知道您设备的CPU，请看这里。 操作系统 是否支持 操作系统 发行版本 备注 ✅ Linux GalliumOS GalliumOS是一个快速而且轻量级的Linux 发行版，主要用于ChromeOS设备。GalliumOS基于Xubuntu构建，提供轻量级而且功能完整的操作桌面。它集成了 ChromeOS鼠标驱动，提供类似 ChromeOS的触控操作体验。 ✅ Linux Lubuntu Lubuntu是新的Ubuntu Linux桌面系统计划,其默认桌面环境为LXDE,特别适用于配备老旧的电脑。 ✅ Linux Xubuntu Xubuntu是一个Ubuntu Linux的官方派生版，它基于桌面环境Xfce。 ✅ Linux Kubuntu Kubuntu是基于Ubuntu的Linux发行版。Kubuntu在Ubuntu的基础上将默认的unity桌面套件替换为KDE套件，包含了精致、美观而实用的Plasma工作空间和一系列经过细心选择而且具实用价值的KDE程序。 ✅ Linux Edubuntu Edubuntu 是一个由Ubuntu正规支持，通过定制的用于教育的派生版本。 ✅ Linux Ubuntu 标准且完整的Ubuntu发行版。 ✅ Linux Fedora 20161121最新版！ ❌ FreeBSD 项目加紧开发中！ 建议 Chromebooks平台是轻量级操作系统和桌面环境，他们是时常更新内核驱动程序来支持他们全新和紧密集成的硬件。 GalliumOS是专为Chromebook而优化。它的能力以及所有的指标看上去很不错，并能非常迅速的安装。一些比较占用内存的应用（例如Steam游戏）得益于GalliumOS的精心优化表现极佳。 chrx默认安装GalliumOS。 Lubuntu成绩和表现良好。它采用了比其他发行版显著较少的内存。 Xubuntu是另一个不错的选择。这是一个较Lubuntu相对较重的操作系统，但是仍然有很好的表现。 Fedora为自定义版本“Spins”（桌面环境，选择-e ENVIRONMENT），其中（lxde）是轻量级的桌面环境，默认桌面环境（gnome）相对更“重”。下图为自定义版本测试安装时间。 不太推荐您选择标准完整的Ubuntu在Chromebook上。下图数据并不反应桌面应用使用情况。受限于硬件，操作系统的性能未必能全部体现。若您的内存在4G左右情况或许能好一些，但并不绝对。 安装测试（注意！国内情况或有不同） 发行版本1 占用空间2 占用内存3 安装时间4 是否推荐 GalliumOS 2.0 2.5GB 291MB 9 分钟 ✅ GalliumOS 1.0 2.8GB 287MB 10分钟 ✅ Lubuntu 15.10 2.7GB 227MB 18分钟 ✅ Lubuntu 16.04 3.1GB 185MB 19分钟 ✅ Xubuntu 15.04 3.0GB 360MB 22分钟 ✅ Ubuntu 15.04 3.5GB 440MB 28分钟 ❌ Kubuntu 15.10 4.2GB 613MB ❌ Fedora 24 (lxde) 2.9GB 182MB 20分钟 ✅ Fedora 24 (cinnamon) 3.8GB 384MB 27分钟 ✅ Fedora 24 4.5GB 647MB 27分钟 ❌ 1.全部桌面环境见 desktop 环境选项；2.可以通过删除不需要的包可以减少磁盘空间。显示的数字反映了默认安装的桌面环境；3.RAM登录图形界面，连接上无线网络后，您可用通过运行终端命令 /usr/bin/free 查看；4.各操作系统的安装时间会有很大程度的不同，这取决于您的互联网连接。当然，上图数据可作为您的参考。 检验程序 工作中可被定义为： 系统启动迅捷 安装残余被清理 启用交换空间和压缩内存 正确的驱动程序加载 触摸板工作 触控板的设置是可用 音频工作，包括 睡眠/唤醒 后 无线网络，包括 睡眠/唤醒 后 用于背光的功能键的功能 功能键音量控制功能 麦克风输入工作 摄像头输入工作 当笔记本电脑关闭时电源管理系统 打开笔记本电脑时的电源管理唤醒系统 没有用户配置所需的基本使用 这份列表可能会有所改变。若您能就此想我们提出宝贵的意见我们将非常欢迎！ 演进chrx之前 chrx开始作为ChrUbuntu的更新和增强版本，并且仍然保留了一些原有ChrUbuntu代码（尤其是磁盘分区位）。 目前的chrx chrx已在数千台Chromebook安装上为用户安装Linux。用户讨论可以在/r/chrubuntu中找到。 chrx将来 我想在一个更广泛的硬件测试和安装其他Linux发行版。对于FreeBSD支持即将到来。如果您不能等待见这里。 备选方案 chrx是一个命令行安装程序，它不需要任何物理媒体或其他准备安装。它可以允许您双启动，这样您便可在Chromebook开机时选择启动Linux或ChromeOS。这是一个灵活的设置，非常适合许多用户，但当然不是所有的。 可以考虑如下替代方案： 休·格林伯格的Distroshare已经很好地更新ISO文件（为Ubuntu和许多其他Linux发行版！），它可以从USB / SD闪存内存安装。这种方法完全从您的Chromebook中删除Chrome操作系统，并致力于将Linux安装到您的固态硬盘。 参见约翰·刘易斯的备用固件选项不支持SeaBIOS旧式引导与固件的Chromebook。 Crouton可以让您同时运行Chrome操作系统和Linux，而不是像chrx或ChrUbuntu双启动。这样的安排有一些缺点，但如果您花在Chrome OS及您的Linux需要的时间是有限的，它应该更好地服务。 原始ChrUbuntu已在各种各样的硬件进行了测试。不幸的是，现在是显著过时了，无法安装Ubuntu 15.04和更新的版本。 14.10与之前的版本应通过ChrUbuntu安装成功，但他们将需要额外的配置工作。如果您的Chromebook是老旧设备或不支持 chrx ，ChrUbuntu或可一试。 对安全和隐私的注意事项 从网络运行的代码始终是一个需要认真思考的行为。 chrx可以直接从网络上运行，并默认将通过相同的机制下载额外的代码。通过从不安全的网络（例如公共Wi-Fi）下载代码可能会产生不好的影响。如果这些是您所关注的，你可以通过审计所涉及的所有代码，比较下载的软件包的校验和承载本地缓存从而降低您所承担的风险（参见高级用法）。此外，在每一个chrx“pings home”安装报告成功或失败。这个ping不包含个人信息，只可能是调查故障有用的数据。登录这些pings创建的条目是这样的： 17.x.x.x - - [01/May/2016:07:37:00 +0000] &quot;GET /end_ok HTTP/1.1&quot; 200 0 &quot;-&quot; &quot;chrx/2.2.3 hw=PEPPY_C6A-V7C-A2C sw=linux,galliumos-desktop,latest,2.0,amd64&quot; &quot;-&quot; hw 是对应于您的Chromebook机型硬件ID（不是序列号）。sw 结合了一些你用来运行 chrx 命令行设置（或默认）。如果这种级别的信息共享是您所不愿意的，可用 -n 禁用。 强迫症 chrx的发音是“棉花糖”。 鸣谢 致敬贡献Chrubuntu的Jay Lee与/r/chrubuntu中提供大量有用资源链接的人士。 更新日志 1.0（20141223） 1.1（20150504）：添加对Ubuntu 15.04的支持 1.1.1（20150508）：添加“-r RELEASE”选项；验证某些输入 1.1.2（20151005）：更新Ubuntu的“trusty”到14.04.3；添加认证设备硬件型号（PEPTO，LINK，SAMUS，LEON，PAINE，YUNA，SPRING，SKATE，FALCO，WOLF）；始终确保chrx.org证书 2.0（20151025）：添加GalliumOS支持；增加对Ubuntu 15.10的支持；增加检测和安装所有已知的Chrome操作系统设备；加上“-d DISTRIBUTION”和“-e ENVIRONMENT”选项；删除“-m METAPACKAGE”选项；删除“-i IMAGE”选项，使RELEASE更智能；变通systemd冲突；重构代码到功能，方便多种发行版本和未来的操作系统。 2.0.1（20151113）：对于GalliumOS更新内核映像路径 2.0.2（20151118）：更新一些硬件型号 2.0.3（20151119）：修正：发行# 4，从ChromeOS中分离partprobe 2.0.4（20151120）：修正：发行#5，“-r RELEASE”处理失败发布的一些RELEASE值 2.0.5（20151212）：第一个用户添加到重要群体;使用GalliumOS通用coreimage 2.0.6（20151214）：修正：#发行7，添加GalliumOS hwspecific入门 2.0.7（20151214）：所有已知的电脑操作系统设备的更新检测；改善预后的描述 2.0.8（20160102）：添加CHRX_NO_REBOOT 环境变量通过https://github.com/MattDevo/scripts使用 2.1（20160103）：添加“- P PACKAGE”选项来安装额外的软件包 2.1.1（20160120）：更新GalliumOS coreimage的URL;确保UTIL添加PKGS 2.1.2（20160130）：添加为解析“-r nightly”（仅GalliumOS，安装每日构建）;日志调试chrx命令行;第一个用户添加到组更便捷 2.2（20160304）：默认分配GalliumOS 2.2.1（20160316）：修正：发行＃12，错误安装到外部媒体 2.2.2（20160420）：重试/恢复失败的映像下载;添加新硬件型号 2.2.3（20160426）：不降重启前壳;不重试coreimage下载;更新蒸汽安装xenial;为Ubuntu 16.04的更新文档 2.2.4（20160505）：添加谷歌Chrome浏览器安装包;添加新硬件型号，更新其它 2.2.5（20160512）：更新Ubuntu的基础/内核镜像URL（感谢arsfeld） 2.2.6（20160619）：隐藏分区的eMMC正确（感谢gmykhailiuta）;提高-r发布处理的GalliumOS;添加初步的处理对于因非运行的ChromeOS 2.2.7（20160810）：使用不同版本的不同Ubuntu的URL，以匹配新的规范办法;更新Ubuntu的“trusty”，至14.04.5 2.2.8（20161002）：添加新GalliumOS硬件特定PKGS支持：布拉斯韦尔，SKYLAKE微架构，SAMUS 2.3（20161121）：增加对Fedora的支持，感谢@jedigo! 2.3.1（20161208）：Fedora:增加-p选项，增加最新版本自动检测，增加非自由代码(thx@jedigo)；GalliumOS:使用chrx GRUB配置；all:新增更多隐藏mmcblk0分区；升级GRUB配置 2.3.2（20161222）：添加用户组分别在选择的distro/metapackage/spin并不包括所有（修复# 30） 2.4（20161228）：增加对镜像站点选择的支持(仅GalliumnOS) 2.4.1（20170129）：GalliumOS：修正LINK，新增CHELL HiDPI pkg选项","categories":[],"tags":[{"name":"Chrx","slug":"Chrx","permalink":"http://yoursite.com/tags/Chrx/"},{"name":"Chromebook","slug":"Chromebook","permalink":"http://yoursite.com/tags/Chromebook/"},{"name":"双系统","slug":"双系统","permalink":"http://yoursite.com/tags/双系统/"},{"name":"翻译","slug":"翻译","permalink":"http://yoursite.com/tags/翻译/"}]},{"title":"lubuntu+GitHub Pages搭建hexo博客","slug":"lubuntu-GitHub-Pages搭建hexo博客","date":"2016-10-23T16:07:36.000Z","updated":"2017-09-28T10:33:20.479Z","comments":true,"path":"2016/10/23/lubuntu-GitHub-Pages搭建hexo博客/","link":"","permalink":"http://yoursite.com/2016/10/23/lubuntu-GitHub-Pages搭建hexo博客/","excerpt":"","text":"Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown 解析文章。以下操作在Ubuntu及其衍生版本内执行基本有效。 前期准备安装 Git $ sudo apt-get install git-core 安装 Node.js $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。 $ nvm install stable 安装 Hexo$ npm install -g hexo-cli $ hexo init &lt;folder&gt; $ cd &lt;folder&gt; $ npm install 后续 1.建议更新系统及软件后再执行操作。 2.请注意安装目录的权限，建议sudo su后执行相应命令。 3.关于”ERROR Deployer not found: git”解决方案请参看这里。 4.安装 Hexo 后有关主题安装与配置请参看这里。 5.Hexo + GitHub Pages 配置过程请参看这里。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"http://yoursite.com/tags/GitHub-Pages/"},{"name":"lubuntu","slug":"lubuntu","permalink":"http://yoursite.com/tags/lubuntu/"}]}]}